const fs = require('fs')
const path = require('path')

const config = require('../../config')
const dbType = config.db.type

const DB_VER = '0.1.0' // current db version
const MIN_DB_VER = '0.1.0' // minimum checkpoint db version

const basePath = path.join(path.resolve(), 'data/jsondb')

// first-time database setup. (table create)
// NOTE: Modify this code on each db update
async function setup (knex) {
  switch (config.db.type) {
    case 'mysql':
    case 'pg': {
      // 'guilds' table
      console.log("Creating 'guilds' table...")
      await knex.schema.createTable('guilds', (t) => {
        t.string('id', 20).primary().notNullable().collate('utf8_unicode_ci')
        t.boolean('activated').notNullable().defaultTo(false)
        t.string('prefix', 11).nullable().collate('utf8_unicode_ci')
        t.string('locale', 5).notNullable().defaultTo('ko_KR').collate('utf8_unicode_ci')

        if (config.db.type === 'mysql') t.charset('utf8')
      })
      console.log("Created table 'guilds'.")

      // 'users' table
      console.log("Creating 'users' table...")
      await knex.schema.createTable('users', (t) => {
        t.string('id', 20).primary().notNullable().collate('utf8_unicode_ci')
        t.string('locale', 5).notNullable().defaultTo('ko_KR').collate('utf8_unicode_ci')

        if (dbType === 'mysql') t.charset('utf8')
      })
      console.log("Created table 'users'.")

      break
    }

    case 'json': {
      let alreadyExistsFile = null

      const guildjson = path.join(basePath, 'guild.json')
      if (!fs.existsSync(guildjson)) {
        fs.writeFileSync(guildjson, '{}')
        console.log('Created guild.json')
      } else alreadyExistsFile = 'guild.json'

      const userjson = path.join(basePath, 'user.json')
      if (!alreadyExistsFile) {
        if (!fs.existsSync(userjson)) {
          fs.writeFileSync(userjson, '{}')
          console.log('Created user.json')
        } else alreadyExistsFile = 'user.json'
      }

      const blacklistjson = path.join(basePath, 'blacklist.json')
      if (!alreadyExistsFile) {
        if (!fs.existsSync(blacklistjson)) {
          fs.writeFileSync(blacklistjson, '[]')
          console.log('Created blacklist.json')
        } else alreadyExistsFile = 'blacklist.json'
      }

      if (alreadyExistsFile) {
        throw new Error(`'${alreadyExistsFile}' already exists in json storage folder. Fresh database setup aborted.`)
      }
    }
  }
}

// upgrade database structure from previous version
// NOTE: Modify this code on each db update
async function upgrade (knex) {
  switch (config.db.type) {
    case 'mysql':
    case 'pg': {
      await knex.schema.table('users', (t) => {
        t.string('locale', 5).notNullable().defaultTo('ko_KR').collate('utf8_unicode_ci')

        if (dbType === 'mysql') t.charset('utf8')
      })

      // change version
      await knex('dbinfo').update({ DB_VER })

      break
    }

    case 'json': {
      // change version
      const versionFilePath = path.join(basePath, '_ver.json')
      const versionObj = {
        warning: 'THIS IS AN AUTOGENERATED FILE. DO NOT EDIT OR DELETE unless you know what you\'re doing.',
        version: DB_VER
      }
      fs.writeFileSync(versionFilePath, JSON.stringify(versionObj, null, 2))
    }
  }
}

module.exports = {
  DB_VER,
  MIN_DB_VER,
  setup,
  upgrade
}
