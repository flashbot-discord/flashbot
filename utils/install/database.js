const fs = require('fs')
const path = require('path')
const compareVer = require('compare-versions').compare

const config = require('../../config')
const {
  setup,
  upgrade,
  DB_VER,
  MIN_DB_VER
} = require('./database.setup')

let knex

// init database client instance here
// or skip if not needed
async function init () {
  switch (config.db.type) {
    case 'mysql':
    case 'pg':
      knex = require('knex')({
        client: config.db.type,
        connection: config.db.connection
      })
  }
}

async function check () {
  // 'dbinfo' table (db structure version storage)
  switch (config.db.type) {
    case 'mysql':
    case 'pg': {
      const exists = await knex.schema.hasTable('dbinfo')
      if (!exists) {
        console.log("'dbinfo' table not found. Creating...")
        await knex.schema.createTable('dbinfo', (t) => {
          t.string('DB_VER', 32).notNullable().collate('utf8_unicode_ci')

          if (config.db.type === 'mysql') t.charset('utf8')
        })
        await knex('dbinfo').insert({ DB_VER })
        console.log("Created 'dbinfo' table.")

        return result(true, true, true)
      } else {
        // check db version
        const dbver = (await knex('dbinfo').select('DB_VER'))[0].DB_VER
        console.log('Database structure version: ' + dbver)
        return compareVersion(dbver)
      }

    }

    case 'json': {
      let isFresh = false

      // check 'data' folder
      const dataFolderPath = path.join(path.resolve(), 'data')
      if (!fs.existsSync(dataFolderPath) || !fs.lstatSync(dataFolderPath).isDirectory()) {
        fs.mkdirSync(dataFolderPath)
        isFresh = true
        console.log('Created data folder')
      } else {
        console.log('Skipping creating data folder')
      }

      // check 'data/jsondb' folder
      const jsonFolderPath = path.join(dataFolderPath, 'jsondb')
      if (isFresh || !fs.existsSync(jsonFolderPath) || !fs.lstatSync(jsonFolderPath).isDirectory()) {
        fs.mkdirSync(jsonFolderPath)
        isFresh = true
        console.log('Created data/jsondb folder')
      } else {
        console.log('Skipping creating data/jsondb folder')
      }

      // check '_ver.json' file
      const versionFilePath = path.join(jsonFolderPath, '_ver.json')
      if (isFresh || !fs.existsSync(versionFilePath) || !fs.lstatSync(versionFilePath).isFile()) {
        // create new file
        const freshVersionObj = {
          warning: 'THIS IS AN AUTOGENERATED FILE. DO NOT EDIT OR DELETE unless you know what you\'re doing.',
          version: DB_VER
        }
        fs.writeFileSync(versionFilePath, JSON.stringify(freshVersionObj, null, 2))

        return result(true, true, true)
      } else {
        // open file and compare version
        const file = fs.readFileSync(versionFilePath, 'utf8')
        const version = JSON.parse(file).version

        return compareVersion(version)
      }
    }

    default:
      throw new Error(`Invalid database type '${config.db.type}'. Database type should be one of 'mysql', 'pg', or 'json'.`)
  }
}

function compareVersion (dbver) {
  if (compareVer(dbver, DB_VER, '=')) {
    // same latest version.
      return result(true, false)
  } else if (compareVer(dbver, DB_VER, '>=')) {
    // Cannot Downgrade
    return result(false, false)
  } else if (compareVer(dbver, MIN_DB_VER, '>=')) {
    // Run upgrade
    return result(true, true, false)
  } else {
    // db structure outdated. exit.
    return result(false, true)
  }
}

async function result (canUpgrade, shouldUpgrade, isFresh) {
  return {
    canUpgrade,
    shouldUpgrade,
    isFresh // new install, not upgrade
  }
}

module.exports = {
  init,
  check,
  setup: async () => await setup(knex),
  upgrade: async () => await upgrade(knex)
}
